{"ast":null,"code":"var _jsxFileName = \"/Users/gauravsain/Desktop/PEPCODING/DEV/React/threadsandtrends/src/Components/FashionAssistant.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"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\";\n// \"Explain things like you would to a 10 year old learning how to code.\"\nconst systemMessage = {\n  //  Explain things like you're talking to a software professional with 5 years of experience.\n  \"role\": \"system\",\n  \"content\": \"Explain things like you're talking to a software professional with 2 years of experience.\"\n};\nfunction FashionAssistant() {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const handleSend = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n\n    // Initial system message to determine ChatGPT functionality\n    // How it responds, how it talks, etc.\n    setIsTyping(true);\n    await processMessageToChatGPT(newMessages);\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    // messages is an array of messages\n    // Format messages for chatGPT API\n    // API is expecting objects in format of { role: \"user\" or \"assistant\", \"content\": \"message here\"}\n    // So we need to reformat\n\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n\n    // Get the request body set up with the model we plan to use\n    // and the messages which we formatted above. We add a system message in the front to'\n    // determine how we want chatGPT to act. \n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage,\n      // The system message DEFINES the logic of our chatGPT\n      ...apiMessages // The messages from our chat with ChatGPT\n      ]\n    };\n\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => {\n      return data.json();\n    }).then(data => {\n      console.log(data);\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setIsTyping(false);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"800px\",\n        width: \"700px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            scrollBehavior: \"smooth\",\n            typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"ChatGPT is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 43\n            }, this) : null,\n            children: messages.map((message, i) => {\n              console.log(message);\n              return /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type message here\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(FashionAssistant, \"Kr7B3D2Jg4IzEj5cQR34MVQFkKg=\");\n_c = FashionAssistant;\nexport default FashionAssistant;\nvar _c;\n$RefreshReg$(_c, \"FashionAssistant\");","map":{"version":3,"names":["useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","API_KEY","systemMessage","FashionAssistant","_s","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","handleSend","newMessage","direction","newMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","role","content","apiRequestBody","fetch","method","headers","body","JSON","stringify","then","data","json","console","log","choices","className","children","style","position","height","width","scrollBehavior","typingIndicator","fileName","_jsxFileName","lineNumber","columnNumber","i","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["/Users/gauravsain/Desktop/PEPCODING/DEV/React/threadsandtrends/src/Components/FashionAssistant.js"],"sourcesContent":["import { useState } from 'react'\nimport './App.css'\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\n\nconst API_KEY = \"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\";\n// \"Explain things like you would to a 10 year old learning how to code.\"\nconst systemMessage = { //  Explain things like you're talking to a software professional with 5 years of experience.\n  \"role\": \"system\", \"content\": \"Explain things like you're talking to a software professional with 2 years of experience.\"\n}\n\nfunction FashionAssistant() {\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello, I'm ChatGPT! Ask me anything!\",\n      sentTime: \"just now\",\n      sender: \"ChatGPT\"\n    }\n  ]);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const handleSend = async (message) => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n\n    const newMessages = [...messages, newMessage];\n    \n    setMessages(newMessages);\n\n    // Initial system message to determine ChatGPT functionality\n    // How it responds, how it talks, etc.\n    setIsTyping(true);\n    await processMessageToChatGPT(newMessages);\n  };\n\n  async function processMessageToChatGPT(chatMessages) { // messages is an array of messages\n    // Format messages for chatGPT API\n    // API is expecting objects in format of { role: \"user\" or \"assistant\", \"content\": \"message here\"}\n    // So we need to reformat\n\n    let apiMessages = chatMessages.map((messageObject) => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return { role: role, content: messageObject.message}\n    });\n\n\n    // Get the request body set up with the model we plan to use\n    // and the messages which we formatted above. We add a system message in the front to'\n    // determine how we want chatGPT to act. \n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [\n        systemMessage,  // The system message DEFINES the logic of our chatGPT\n        ...apiMessages // The messages from our chat with ChatGPT\n      ]\n    }\n\n    await fetch(\"https://api.openai.com/v1/chat/completions\", \n    {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then((data) => {\n      return data.json();\n    }).then((data) => {\n      console.log(data);\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setIsTyping(false);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{ position:\"relative\", height: \"800px\", width: \"700px\"  }}>\n        <MainContainer>\n          <ChatContainer>       \n            <MessageList \n              scrollBehavior=\"smooth\" \n              typingIndicator={isTyping ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}\n            >\n              {messages.map((message, i) => {\n                console.log(message)\n                return <Message key={i} model={message} />\n              })}\n            </MessageList>\n            <MessageInput placeholder=\"Type message here\" onSend={handleSend} />        \n          </ChatContainer>\n        </MainContainer>\n      </div>\n    </div>\n  )\n}\n\nexport default FashionAssistant"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}