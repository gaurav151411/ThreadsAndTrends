{"ast":null,"code":"/*\n   Set of transformation rules\n   Copyright (C) 2019 Hugo W.L. ter Doest\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n'use strict ';\n\nconst TFParser = require('./TF_Parser');\nconst dutchRuleSet = require('../data/Dutch/brill_CONTEXTRULES.json');\nconst englishRuleSet = require('../data/English/tr_from_posjs.json');\nconst DEBUG = false;\n\n// Constructor takes a language abbreviation and loads the right rule set\nfunction RuleSet(language) {\n  let data = englishRuleSet;\n  DEBUG && console.log(data);\n  switch (language) {\n    case 'EN':\n      data = englishRuleSet;\n      break;\n    case 'DU':\n      data = dutchRuleSet;\n      break;\n  }\n  if (data.rules) {\n    this.rules = {};\n    const that = this;\n    data.rules.forEach(function (ruleString) {\n      that.addRule(TFParser.parse(ruleString));\n    });\n  }\n  DEBUG && console.log(this.rules);\n  DEBUG && console.log('Brill_POS_Tagger.read_transformation_rules: number of transformation rules read: ' + Object.keys(this.rules).length);\n}\nRuleSet.prototype.addRule = function (rule) {\n  // this.rules.push(rule);\n  if (!this.rules[rule.key()]) {\n    this.rules[rule.key()] = rule;\n    return true;\n  } else {\n    return false;\n  }\n};\nRuleSet.prototype.removeRule = function (rule) {\n  if (this.rules[rule.key()]) {\n    delete this.rules[rule.key()];\n  }\n};\nRuleSet.prototype.getRules = function () {\n  const that = this;\n  return Object.keys(this.rules).map(function (key) {\n    return that.rules[key];\n  });\n};\nRuleSet.prototype.nrRules = function () {\n  return Object.keys(this.rules).length;\n};\nRuleSet.prototype.hasRule = function (rule) {\n  if (this.rules[rule.key()]) {\n    return true;\n  } else {\n    return false;\n  }\n};\nRuleSet.prototype.prettyPrint = function () {\n  let result = '';\n  const that = this;\n  Object.keys(this.rules).forEach(function (key) {\n    const rule = that.rules[key];\n    result += rule.prettyPrint() + '\\n';\n  });\n  return result;\n};\nmodule.exports = RuleSet;","map":{"version":3,"names":["TFParser","require","dutchRuleSet","englishRuleSet","DEBUG","RuleSet","language","data","console","log","rules","that","forEach","ruleString","addRule","parse","Object","keys","length","prototype","rule","key","removeRule","getRules","map","nrRules","hasRule","prettyPrint","result","module","exports"],"sources":["/Users/gauravsain/Desktop/PEPCODING/DEV/React/threadsandtrends/node_modules/natural/lib/natural/brill_pos_tagger/lib/RuleSet.js"],"sourcesContent":["/*\n   Set of transformation rules\n   Copyright (C) 2019 Hugo W.L. ter Doest\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n'use strict '\n\nconst TFParser = require('./TF_Parser')\n\nconst dutchRuleSet = require('../data/Dutch/brill_CONTEXTRULES.json')\nconst englishRuleSet = require('../data/English/tr_from_posjs.json')\n\nconst DEBUG = false\n\n// Constructor takes a language abbreviation and loads the right rule set\nfunction RuleSet (language) {\n  let data = englishRuleSet\n  DEBUG && console.log(data)\n  switch (language) {\n    case 'EN':\n      data = englishRuleSet\n      break\n    case 'DU':\n      data = dutchRuleSet\n      break\n  }\n  if (data.rules) {\n    this.rules = {}\n    const that = this\n    data.rules.forEach(function (ruleString) {\n      that.addRule(TFParser.parse(ruleString))\n    })\n  }\n  DEBUG && console.log(this.rules)\n  DEBUG && console.log('Brill_POS_Tagger.read_transformation_rules: number of transformation rules read: ' + Object.keys(this.rules).length)\n}\n\nRuleSet.prototype.addRule = function (rule) {\n  // this.rules.push(rule);\n  if (!this.rules[rule.key()]) {\n    this.rules[rule.key()] = rule\n    return true\n  } else {\n    return false\n  }\n}\n\nRuleSet.prototype.removeRule = function (rule) {\n  if (this.rules[rule.key()]) {\n    delete this.rules[rule.key()]\n  }\n}\n\nRuleSet.prototype.getRules = function () {\n  const that = this\n  return Object.keys(this.rules).map(function (key) {\n    return that.rules[key]\n  })\n}\n\nRuleSet.prototype.nrRules = function () {\n  return Object.keys(this.rules).length\n}\n\nRuleSet.prototype.hasRule = function (rule) {\n  if (this.rules[rule.key()]) {\n    return true\n  } else {\n    return false\n  }\n}\n\nRuleSet.prototype.prettyPrint = function () {\n  let result = ''\n  const that = this\n  Object.keys(this.rules).forEach(function (key) {\n    const rule = that.rules[key]\n    result += rule.prettyPrint() + '\\n'\n  })\n  return result\n}\n\nmodule.exports = RuleSet\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}