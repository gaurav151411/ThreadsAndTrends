{"ast":null,"code":"var _jsxFileName = \"/Users/gauravsain/Desktop/PEPCODING/DEV/React/threadsandtrends/src/Components/FashionAssistant.js\";\nimport React, { Component } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from \"@chatscope/chat-ui-kit-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"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\";\nclass FashionAssistant extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSend = async message => {\n      const {\n        messages\n      } = this.state;\n      const newMessage = {\n        message: message,\n        sender: \"user\",\n        direction: \"outgoing\"\n      };\n      const newMessages = [...messages, newMessage];\n      this.setState({\n        messages: newMessages,\n        typing: true\n      });\n      await this.processMessageToChatGPT(newMessages);\n    };\n    this.processMessageToChatGPT = async chatMessages => {\n      let apiMessages = chatMessages.map(messageObject => {\n        let role = \"\";\n        if (messageObject.sender === \"ChatGPT\") {\n          role = \"assistant\";\n        } else {\n          role = \"user\";\n        }\n        return {\n          role: role,\n          content: messageObject.message\n        };\n      });\n      const systemMessage = {\n        role: \"system\",\n        content: \"Explain all concepts like I am 10 years old.\"\n      };\n      const apiRequestBody = {\n        \"model\": \"gpt-3.5-turbo\",\n        \"messages\": [systemMessage, ...apiMessages]\n      };\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"Bearer \" + API_KEY,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n      const data = await response.json();\n      if (data == null) {\n        // this.setState({})\n      } else {}\n      const {\n        messages\n      } = this.state;\n      const newChatMessages = [...messages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }];\n      this.setState({\n        messages: newChatMessages,\n        typing: false\n      });\n    };\n    this.state = {\n      typing: false,\n      messages: [{\n        message: \"Hello, I am ChatGPT\",\n        sender: \"ChatGPT\"\n      }]\n    };\n  }\n  render() {\n    const {\n      typing,\n      messages\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"relative\",\n          height: \"700px\",\n          width: \"800px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(MainContainer, {\n          children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n            children: [/*#__PURE__*/_jsxDEV(MessageList, {\n              scrollBehavior: \"smooth\",\n              typingIndicator: typing ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n                content: \"ChatGPT is Typing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 43\n              }, this) : null,\n              children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n              placeholder: \"Type Message Here\",\n              onSend: this.handleSend\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default FashionAssistant;","map":{"version":3,"names":["React","Component","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","API_KEY","FashionAssistant","constructor","props","handleSend","message","messages","state","newMessage","sender","direction","newMessages","setState","typing","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","role","content","systemMessage","apiRequestBody","response","fetch","method","headers","body","JSON","stringify","data","json","newChatMessages","choices","render","className","children","style","position","height","width","scrollBehavior","typingIndicator","fileName","_jsxFileName","lineNumber","columnNumber","i","model","placeholder","onSend"],"sources":["/Users/gauravsain/Desktop/PEPCODING/DEV/React/threadsandtrends/src/Components/FashionAssistant.js"],"sourcesContent":["import React, { Component } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from \"@chatscope/chat-ui-kit-react\";\n\nconst API_KEY = \"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\";\n\nclass FashionAssistant extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      typing: false,\n      messages: [\n        {\n          message: \"Hello, I am ChatGPT\",\n          sender: \"ChatGPT\"\n        }\n      ]\n    };\n  }\n\n  handleSend = async (message) => {\n    const { messages } = this.state;\n\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n\n    const newMessages = [...messages, newMessage];\n    this.setState({ messages: newMessages, typing: true });\n\n    await this.processMessageToChatGPT(newMessages);\n  }\n\n  processMessageToChatGPT = async (chatMessages) => {\n    let apiMessages = chatMessages.map((messageObject) => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return { role: role, content: messageObject.message };\n    });\n\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain all concepts like I am 10 years old.\"\n    };\n\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [\n        systemMessage,\n        ...apiMessages\n      ]\n    };\n\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    });\n\n    const data = await response.json();\n    if(data==null){\n        // this.setState({})\n    }else{\n        \n    }\n    const { messages } = this.state;\n    const newChatMessages = [\n      ...messages,\n      {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }\n    ];\n\n    this.setState({ messages: newChatMessages, typing: false });\n  }\n\n  render() {\n    const { typing, messages } = this.state;\n\n    return (\n      <div className='App'>\n        <div style={{ position: \"relative\", height: \"700px\", width: \"800px\" }}>\n          <MainContainer>\n            <ChatContainer>\n              <MessageList\n                scrollBehavior='smooth'\n                typingIndicator={typing ? <TypingIndicator content=\"ChatGPT is Typing\" /> : null}\n              >\n                {messages.map((message, i) => (\n                  <Message key={i} model={message} />\n                ))}\n              </MessageList>\n              <MessageInput placeholder='Type Message Here' onSend={this.handleSend} />\n            </ChatContainer>\n          </MainContainer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FashionAssistant;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}