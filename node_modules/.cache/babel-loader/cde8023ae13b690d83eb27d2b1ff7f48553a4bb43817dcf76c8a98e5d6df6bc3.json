{"ast":null,"code":"processMessageToChatGPT = async userMessage => {\n  const {\n    messages\n  } = this.state;\n  const newUserMessage = {\n    message: userMessage,\n    sender: \"user\",\n    direction: \"outgoing\"\n  };\n  const newMessages = [...messages, newUserMessage]; // Add the user's message\n  this.setState({\n    messages: newMessages,\n    typing: true\n  });\n  const options = {\n    method: 'POST',\n    url: 'https://open-ai21.p.rapidapi.com/conversationllama',\n    headers: {\n      'content-type': 'application/json',\n      'X-RapidAPI-Key': API_KEY,\n      'X-RapidAPI-Host': 'open-ai21.p.rapidapi.com'\n    },\n    data: {\n      messages: [{\n        role: 'user',\n        content: userMessage\n      }],\n      web_access: false\n    }\n  };\n  try {\n    const response = await axios.request(options);\n    const assistantMessage = response.data.LLAMA;\n    const newAssistantMessage = {\n      message: assistantMessage,\n      sender: \"ChatGPT\",\n      direction: \"incoming\"\n    };\n    const updatedMessages = [...newMessages, newAssistantMessage]; // Add assistant's response\n    this.setState({\n      messages: updatedMessages,\n      typing: false\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};","map":{"version":3,"names":["processMessageToChatGPT","userMessage","messages","state","newUserMessage","message","sender","direction","newMessages","setState","typing","options","method","url","headers","API_KEY","data","role","content","web_access","response","axios","request","assistantMessage","LLAMA","newAssistantMessage","updatedMessages","error","console"],"sources":["/Users/gauravsain/Desktop/PEPCODING/DEV/React/threadsandtrends/src/Components/FashionAssistant.js"],"sourcesContent":["processMessageToChatGPT = async (userMessage) => {\n  const { messages } = this.state;\n\n  const newUserMessage = {\n    message: userMessage,\n    sender: \"user\",\n    direction: \"outgoing\"\n  };\n\n  const newMessages = [...messages, newUserMessage]; // Add the user's message\n  this.setState({ messages: newMessages, typing: true });\n\n  const options = {\n    method: 'POST',\n    url: 'https://open-ai21.p.rapidapi.com/conversationllama',\n    headers: {\n      'content-type': 'application/json',\n      'X-RapidAPI-Key': API_KEY,\n      'X-RapidAPI-Host': 'open-ai21.p.rapidapi.com'\n    },\n    data: {\n      messages: [\n        {\n          role: 'user',\n          content: userMessage\n        }\n      ],\n      web_access: false\n    }\n  };\n  \n  try {\n    const response = await axios.request(options);\n    const assistantMessage = response.data.LLAMA;\n    \n    const newAssistantMessage = {\n      message: assistantMessage,\n      sender: \"ChatGPT\",\n      direction: \"incoming\"\n    };\n\n    const updatedMessages = [...newMessages, newAssistantMessage]; // Add assistant's response\n    this.setState({ messages: updatedMessages, typing: false });\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"mappings":"AAAAA,uBAAuB,GAAG,MAAOC,WAAW,IAAK;EAC/C,MAAM;IAAEC;EAAS,CAAC,GAAG,IAAI,CAACC,KAAK;EAE/B,MAAMC,cAAc,GAAG;IACrBC,OAAO,EAAEJ,WAAW;IACpBK,MAAM,EAAE,MAAM;IACdC,SAAS,EAAE;EACb,CAAC;EAED,MAAMC,WAAW,GAAG,CAAC,GAAGN,QAAQ,EAAEE,cAAc,CAAC,CAAC,CAAC;EACnD,IAAI,CAACK,QAAQ,CAAC;IAAEP,QAAQ,EAAEM,WAAW;IAAEE,MAAM,EAAE;EAAK,CAAC,CAAC;EAEtD,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE,MAAM;IACdC,GAAG,EAAE,oDAAoD;IACzDC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,gBAAgB,EAAEC,OAAO;MACzB,iBAAiB,EAAE;IACrB,CAAC;IACDC,IAAI,EAAE;MACJd,QAAQ,EAAE,CACR;QACEe,IAAI,EAAE,MAAM;QACZC,OAAO,EAAEjB;MACX,CAAC,CACF;MACDkB,UAAU,EAAE;IACd;EACF,CAAC;EAED,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,OAAO,CAACX,OAAO,CAAC;IAC7C,MAAMY,gBAAgB,GAAGH,QAAQ,CAACJ,IAAI,CAACQ,KAAK;IAE5C,MAAMC,mBAAmB,GAAG;MAC1BpB,OAAO,EAAEkB,gBAAgB;MACzBjB,MAAM,EAAE,SAAS;MACjBC,SAAS,EAAE;IACb,CAAC;IAED,MAAMmB,eAAe,GAAG,CAAC,GAAGlB,WAAW,EAAEiB,mBAAmB,CAAC,CAAC,CAAC;IAC/D,IAAI,CAAChB,QAAQ,CAAC;MAAEP,QAAQ,EAAEwB,eAAe;MAAEhB,MAAM,EAAE;IAAM,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACtB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}