{"ast":null,"code":"var _jsxFileName = \"/Users/gauravsain/Desktop/PEPCODING/DEV/React/threadsandtrends/src/Components/AutoTyping.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AutoTypingTextAnimation extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      strings: [],\n      currentStringIndex: 0,\n      currentString: '',\n      currentCharIndex: 0,\n      typingInterval: null\n    };\n    this.startTyping = string => {\n      this.clearTypingInterval();\n      const typingInterval = setInterval(this.typeCharacter, 100); // Adjust the delay here\n      this.setState({\n        currentString: string,\n        currentCharIndex: 0,\n        typingInterval\n      });\n    };\n    this.clearTypingInterval = () => {\n      clearInterval(this.state.typingInterval);\n    };\n    this.typeCharacter = () => {\n      const {\n        currentString,\n        currentCharIndex,\n        strings,\n        currentStringIndex\n      } = this.state;\n      if (currentCharIndex < currentString.length) {\n        this.setState({\n          currentCharIndex: currentCharIndex + 1\n        });\n      } else {\n        const nextStringIndex = (currentStringIndex + 1) % strings.length;\n        this.setState({\n          currentStringIndex: nextStringIndex\n        });\n        this.startTyping(strings[nextStringIndex]);\n      }\n    };\n  }\n  componentDidMount() {\n    const {\n      strings\n    } = this.props;\n    this.setState({\n      strings\n    });\n    this.startTyping(strings[0]);\n  }\n  componentWillUnmount() {\n    this.clearTypingInterval();\n  }\n  render() {\n    const {\n      currentString,\n      currentCharIndex,\n      strings\n    } = this.state;\n    const words = currentString.split(' ');\n    for (let i = 0; i < strings.length; i++) {\n      const words = strings[i].split('');\n    }\n    const lines = [];\n    let currentLine = '';\n    for (const word of words) {\n      if ((currentLine + word).length > 20) {\n        lines.push(currentLine);\n        currentLine = '';\n      }\n      currentLine += (currentLine ? ' ' : '') + word;\n    }\n    if (currentLine.length > 0) {\n      lines.push(currentLine);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auto-typing-text-animation\",\n      style: {\n        fontSize: '40px',\n        marginLeft: \"20px\"\n      },\n      children: lines.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: line.substring(0, currentCharIndex)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default AutoTypingTextAnimation;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","AutoTypingTextAnimation","constructor","args","state","strings","currentStringIndex","currentString","currentCharIndex","typingInterval","startTyping","string","clearTypingInterval","setInterval","typeCharacter","setState","clearInterval","length","nextStringIndex","componentDidMount","props","componentWillUnmount","render","words","split","i","lines","currentLine","word","push","className","style","fontSize","marginLeft","children","map","line","index","substring","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/gauravsain/Desktop/PEPCODING/DEV/React/threadsandtrends/src/Components/AutoTyping.js"],"sourcesContent":["import React, { Component } from 'react';\n\nclass AutoTypingTextAnimation extends Component {\n  state = {\n    strings: [],\n    currentStringIndex: 0,\n    currentString: '',\n    currentCharIndex: 0,\n    typingInterval: null,\n  };\n\n  componentDidMount() {\n    const { strings } = this.props;\n    this.setState({ strings });\n    this.startTyping(strings[0]);\n  }\n\n  componentWillUnmount() {\n    this.clearTypingInterval();\n  }\n\n  startTyping = (string) => {\n    this.clearTypingInterval();\n    const typingInterval = setInterval(this.typeCharacter, 100); // Adjust the delay here\n    this.setState({\n      currentString: string,\n      currentCharIndex: 0,\n      typingInterval,\n    });\n  };\n\n  clearTypingInterval = () => {\n    clearInterval(this.state.typingInterval);\n  };\n\n  typeCharacter = () => {\n    const { currentString, currentCharIndex, strings, currentStringIndex } = this.state;\n\n    if (currentCharIndex < currentString.length) {\n      this.setState({ currentCharIndex: currentCharIndex + 1 });\n    } else {\n      const nextStringIndex = (currentStringIndex + 1) % strings.length;\n      this.setState({ currentStringIndex: nextStringIndex });\n      this.startTyping(strings[nextStringIndex]);\n    }\n  };\n\n  render() {\n    const { currentString, currentCharIndex,strings } = this.state;\n    const words = currentString.split(' ');\n    for(let i=0;i<strings.length;i++){\n      const words=strings[i].split('')\n    }\n    const lines = [];\n    let currentLine = '';\n\n    for (const word of words) {\n      if ((currentLine + word).length > 20) {\n        lines.push(currentLine);\n        currentLine = '';\n      }\n      currentLine += (currentLine ? ' ' : '') + word;\n    }\n    if (currentLine.length > 0) {\n      lines.push(currentLine);\n    }\n\n    return (\n      <div className=\"auto-typing-text-animation\" style={{ fontSize: '40px',marginLeft:\"20px\"}}>\n        {lines.map((line, index) => (\n          <div key={index}>{line.substring(0, currentCharIndex)}</div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default AutoTypingTextAnimation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}