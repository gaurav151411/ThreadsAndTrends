{"ast":null,"code":"/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() {\n    this.constructor = child;\n  }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\";\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\npeg$subclass(peg$SyntaxError, Error);\npeg$SyntaxError.buildMessage = function (expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function (expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    \"class\": function (expectation) {\n      var escapedParts = \"\",\n        i;\n      for (i = 0; i < expectation.parts.length; i++) {\n        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);\n      }\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n    any: function (expectation) {\n      return \"any character\";\n    },\n    end: function (expectation) {\n      return \"end of input\";\n    },\n    other: function (expectation) {\n      return expectation.description;\n    }\n  };\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n  function classEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\\]/g, '\\\\]').replace(/\\^/g, '\\\\^').replace(/-/g, '\\\\-').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n      i,\n      j;\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n    descriptions.sort();\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n  var peg$FAILED = {},\n    peg$startRuleFunctions = {\n      s: peg$parses\n    },\n    peg$startRuleFunction = peg$parses,\n    peg$c0 = function (sentences) {\n      let result = [];\n      sentences.forEach(sent0 => {\n        sent0[0].forEach(sent1 => {\n          result.push(sent1);\n        });\n      });\n      return result;\n    },\n    peg$c1 = function (sentences) {\n      //return sentences\n      return sentences.map(sent => {\n        //if (sent[1]) {\n        sent[0].push(sent[1]);\n        //}\n        return sent[0].reduce((accu, str) => accu + str).trim();\n      });\n    },\n    peg$c2 = function (open, sentences, close) {\n      //return sentences\n      let result = sentences.map(sent => {\n        //if (sent[1]) {\n        sent[0].push(sent[1]);\n        //}\n        return sent[0].reduce((accu, str) => accu + str).trim();\n      });\n      result.unshift(open);\n      if (close) {\n        result.push(close);\n      }\n      return result;\n    },\n    peg$c3 = function (seqs, end) {\n      let res = seqs.reduce((accu, seq) => accu.concat(seq));\n      res.push(end);\n      return res;\n    },\n    peg$c4 = function (tokens) {\n      let result = tokens.map(pair => pair[0] + pair[1]);\n      return result;\n    },\n    peg$c5 = function (open, tokens, end, close) {\n      let result = tokens.map(pair => pair[0] + pair[1]);\n      result.unshift(open);\n      result.push(end);\n      result.push(close);\n      return result;\n    },\n    peg$c6 = /^[ \\t\\n\\r.?!]/,\n    peg$c7 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \".\", \"?\", \"!\"], false, false),\n    peg$c8 = function () {\n      return text();\n    },\n    peg$c9 = /^[ \\t\\n\\r]/,\n    peg$c10 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n    peg$c11 = function (t) {\n      return t;\n    },\n    peg$c12 = /^[^ \\t\\n\\r!?([}\"`)\\]}\"`0-9@]/,\n    peg$c13 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \"!\", \"?\", \"(\", \"[\", \"}\", \"\\\"\", \"`\", \")\", \"]\", \"}\", \"\\\"\", \"`\", [\"0\", \"9\"], \"@\"], true, false),\n    peg$c14 = function (word) {\n      const tmp = word.reduce((accu, elt) => accu + elt);\n      return knownAbbreviations.indexOf(tmp) > -1;\n    },\n    peg$c15 = function (word) {\n      return text();\n    },\n    peg$c16 = /^[^ \\t\\n\\r!?.([})\\]}`\"0-9@]/,\n    peg$c17 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \"!\", \"?\", \".\", \"(\", \"[\", \"}\", \")\", \"]\", \"}\", \"`\", \"\\\"\", [\"0\", \"9\"], \"@\"], true, false),\n    peg$c18 = function () {\n      return text();\n    },\n    peg$c19 = /^[0-9]/,\n    peg$c20 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n    peg$c21 = peg$anyExpectation(),\n    peg$c22 = /^[a-z]/,\n    peg$c23 = peg$classExpectation([[\"a\", \"z\"]], false, false),\n    peg$c24 = /^[@]/,\n    peg$c25 = peg$classExpectation([\"@\"], false, false),\n    peg$c26 = /^[.]/,\n    peg$c27 = peg$classExpectation([\".\"], false, false),\n    peg$c28 = \"http://\",\n    peg$c29 = peg$literalExpectation(\"http://\", false),\n    peg$c30 = \"https://\",\n    peg$c31 = peg$literalExpectation(\"https://\", false),\n    peg$c32 = /^[a-z0-9]/,\n    peg$c33 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"]], false, false),\n    peg$c34 = /^[\\/]/,\n    peg$c35 = peg$classExpectation([\"/\"], false, false),\n    peg$c36 = function () {\n      return text();\n    },\n    peg$c37 = /^[([{\"'`\\u2018]/,\n    peg$c38 = peg$classExpectation([\"(\", \"[\", \"{\", \"\\\"\", \"'\", \"`\", \"\\u2018\"], false, false),\n    peg$c39 = /^[)\\]}\"'`\\u2019]/,\n    peg$c40 = peg$classExpectation([\")\", \"]\", \"}\", \"\\\"\", \"'\", \"`\", \"\\u2019\"], false, false),\n    peg$currPos = 0,\n    peg$savedPos = 0,\n    peg$posDetailsCache = [{\n      line: 1,\n      column: 1\n    }],\n    peg$maxFailPos = 0,\n    peg$maxFailExpected = [],\n    peg$silentFails = 0,\n    peg$result;\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n  }\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location);\n  }\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos],\n      p;\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n        p++;\n      }\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n      endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n    peg$maxFailExpected.push(expected);\n  }\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n  }\n  function peg$parses() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parseSentences();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseWhitespace();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 === peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parseQuotedSentences();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseWhitespace();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parseSentences();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseWhitespace();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parseQuotedSentences();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseWhitespace();\n            if (s4 !== peg$FAILED) {\n              s3 = [s3, s4];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c0(s1);\n    }\n    s0 = s1;\n    return s0;\n  }\n  function peg$parseSentences() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parseSentence();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseWhitespace();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parseSentence();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseWhitespace();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1(s1);\n    }\n    s0 = s1;\n    return s0;\n  }\n  function peg$parseQuotedSentences() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n    s1 = peg$parseOpenSymbol();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseSentence();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseWhitespace();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseSentence();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseWhitespace();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseCloseSymbol();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parseSentence() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseTokenSeq();\n    if (s2 === peg$FAILED) {\n      s2 = peg$parseQuotedTokenSeq();\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseTokenSeq();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseQuotedTokenSeq();\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEndOfSentence();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c3(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parseTokenSeq() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parseToken();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseWhitespace();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parseToken();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseWhitespace();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c4(s1);\n    }\n    s0 = s1;\n    return s0;\n  }\n  function peg$parseQuotedTokenSeq() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n    s1 = peg$parseOpenSymbol();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseToken();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseWhitespace();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseToken();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseWhitespace();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseEndOfSentence();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseCloseSymbol();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c5(s1, s2, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parseEndOfSentence() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c6.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c7);\n      }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (peg$c6.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c7);\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c8();\n    }\n    s0 = s1;\n    return s0;\n  }\n  function peg$parseWhitespace() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c9.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c10);\n      }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (peg$c9.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c10);\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c8();\n    }\n    s0 = s1;\n    return s0;\n  }\n  function peg$parseToken() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parseURI();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseEmail();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseNumber();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseAbbreviation();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseWord();\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c11(s1);\n    }\n    s0 = s1;\n    return s0;\n  }\n  function peg$parseAbbreviation() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c12.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c13);\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c12.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c13);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c14(s1);\n      if (s2) {\n        s2 = void 0;\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parseWord() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c16.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c17);\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c16.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c17);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c18();\n    }\n    s0 = s1;\n    return s0;\n  }\n  function peg$parseNumber() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c19.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c20);\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c19.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c20);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c21);\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        if (peg$c19.test(input.charAt(peg$currPos))) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c20);\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            if (peg$c19.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c20);\n              }\n            }\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseCloseSymbol();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parseEmail() {\n    var s0, s1, s2, s3, s4, s5, s6;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c22.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c23);\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c22.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c23);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c24.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c25);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        if (peg$c22.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c23);\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            if (peg$c22.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n              }\n            }\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          if (peg$c26.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c27);\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c22.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c23);\n              }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c22.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c23);\n                  }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c8();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parseURI() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7) === peg$c28) {\n      s1 = peg$c28;\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c29);\n      }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 8) === peg$c30) {\n        s1 = peg$c30;\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c31);\n        }\n      }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c32.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c33);\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c32.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c33);\n            }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (peg$c26.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c27);\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = [];\n          if (peg$c32.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c33);\n            }\n          }\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              if (peg$c32.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c33);\n                }\n              }\n            }\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            if (peg$c26.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c27);\n              }\n            }\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c32.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c33);\n              }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c32.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c33);\n                  }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = [];\n              if (peg$c32.test(input.charAt(peg$currPos))) {\n                s9 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c33);\n                }\n              }\n              if (s9 !== peg$FAILED) {\n                while (s9 !== peg$FAILED) {\n                  s8.push(s9);\n                  if (peg$c32.test(input.charAt(peg$currPos))) {\n                    s9 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c33);\n                    }\n                  }\n                }\n              } else {\n                s8 = peg$FAILED;\n              }\n              if (s8 !== peg$FAILED) {\n                if (peg$c34.test(input.charAt(peg$currPos))) {\n                  s9 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c35);\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  s8 = [s8, s9];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = [];\n                if (peg$c32.test(input.charAt(peg$currPos))) {\n                  s9 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c33);\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    if (peg$c32.test(input.charAt(peg$currPos))) {\n                      s9 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c33);\n                      }\n                    }\n                  }\n                } else {\n                  s8 = peg$FAILED;\n                }\n                if (s8 !== peg$FAILED) {\n                  if (peg$c34.test(input.charAt(peg$currPos))) {\n                    s9 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c35);\n                    }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s8 = [s8, s9];\n                    s7 = s8;\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c36();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parseOpenSymbol() {\n    var s0, s1;\n    s0 = peg$currPos;\n    if (peg$c37.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c38);\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c8();\n    }\n    s0 = s1;\n    return s0;\n  }\n  function peg$parseCloseSymbol() {\n    var s0, s1;\n    s0 = peg$currPos;\n    if (peg$c39.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c40);\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c8();\n    }\n    s0 = s1;\n    return s0;\n  }\n  const knownAbbreviations = require(\"../util/abbreviations_en\").knownAbbreviations;\n  peg$result = peg$startRuleFunction();\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse\n};","map":{"version":3,"names":["peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","name","Error","captureStackTrace","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","class","escapedParts","i","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","s","replace","describeExpectation","type","describeExpected","descriptions","j","sort","slice","join","describeFound","peg$parse","input","options","peg$FAILED","peg$startRuleFunctions","peg$parses","peg$startRuleFunction","peg$c0","sentences","result","forEach","sent0","sent1","push","peg$c1","map","sent","reduce","accu","str","trim","peg$c2","open","close","unshift","peg$c3","seqs","res","seq","concat","peg$c4","tokens","pair","peg$c5","peg$c6","peg$c7","peg$classExpectation","peg$c8","peg$c9","peg$c10","peg$c11","t","peg$c12","peg$c13","peg$c14","word","tmp","elt","knownAbbreviations","indexOf","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","peg$c20","peg$c21","peg$anyExpectation","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$literalExpectation","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","peg$computeLocation","peg$buildStructuredError","peg$otherExpectation","error","peg$buildSimpleError","ignoreCase","peg$endExpectation","peg$computePosDetails","pos","details","p","startPos","endPos","startPosDetails","endPosDetails","start","offset","peg$fail","s0","s1","s2","s3","s4","peg$parseSentences","peg$parseWhitespace","peg$parseQuotedSentences","peg$parseSentence","s5","peg$parseOpenSymbol","peg$parseCloseSymbol","peg$parseTokenSeq","peg$parseQuotedTokenSeq","peg$parseEndOfSentence","peg$parseToken","test","charAt","peg$parseURI","peg$parseEmail","peg$parseNumber","peg$parseAbbreviation","peg$parseWord","s6","s7","s8","s9","substr","require","module","exports","SyntaxError","parse"],"sources":["/Users/gauravsain/Desktop/PEPCODING/DEV/React/threadsandtrends/node_modules/natural/lib/natural/tokenizers/parser_sentence_tokenizer.js"],"sourcesContent":["/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { s: peg$parses },\n      peg$startRuleFunction  = peg$parses,\n\n      peg$c0 = function(sentences) {\n      \t\tlet result = []\n      \t\tsentences.forEach(sent0 => {\n      \t\t\tsent0[0].forEach(sent1 => {\n      \t\t\t\tresult.push(sent1)\n      \t\t\t})\n      \t\t})\n      \t\treturn result\n      \t},\n      peg$c1 = function(sentences) {\n            //return sentences\n            return(\n                sentences.map(sent => {\n                \t//if (sent[1]) {\n                \t  sent[0].push(sent[1])\n                  //}\n                  return sent[0].reduce((accu, str) =>  accu + str).trim()\n                })\n            )\n          },\n      peg$c2 = function(open, sentences, close) {\n            //return sentences\n            let result = sentences.map(sent => {\n            \t//if (sent[1]) {\n            \t  sent[0].push(sent[1])\n              //}\n              return sent[0].reduce((accu, str) =>  accu + str).trim()\n            })\n      \t\t\tresult.unshift(open)\n      \t\t\tif (close) {\n            \tresult.push(close)\n      \t\t\t}\n            return result\n          },\n      peg$c3 = function(seqs, end) {\n            let res = seqs.reduce((accu, seq) => accu.concat(seq))\n            res.push(end)\n            return res\n          },\n      peg$c4 = function(tokens) {\n             let result = tokens.map(pair => pair[0] + pair[1])\n             return result\n           },\n      peg$c5 = function(open, tokens, end, close) {\n        \t  let result = tokens.map(pair => pair[0] + pair[1])\n            result.unshift(open)\n            result.push(end)\n            result.push(close)\n            return result\n          },\n      peg$c6 = /^[ \\t\\n\\r.?!]/,\n      peg$c7 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \".\", \"?\", \"!\"], false, false),\n      peg$c8 = function() {\n            return text()\n          },\n      peg$c9 = /^[ \\t\\n\\r]/,\n      peg$c10 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c11 = function(t) {\n            return t\n          },\n      peg$c12 = /^[^ \\t\\n\\r!?([}\"`)\\]}\"`0-9@]/,\n      peg$c13 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \"!\", \"?\", \"(\", \"[\", \"}\", \"\\\"\", \"`\", \")\", \"]\", \"}\", \"\\\"\", \"`\", [\"0\", \"9\"], \"@\"], true, false),\n      peg$c14 = function(word) {\n              const tmp = word.reduce((accu, elt) => accu + elt)\n              return knownAbbreviations.indexOf(tmp) > -1},\n      peg$c15 = function(word) {\n          \treturn text()\n          },\n      peg$c16 = /^[^ \\t\\n\\r!?.([})\\]}`\"0-9@]/,\n      peg$c17 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \"!\", \"?\", \".\", \"(\", \"[\", \"}\", \")\", \"]\", \"}\", \"`\", \"\\\"\", [\"0\", \"9\"], \"@\"], true, false),\n      peg$c18 = function() {\n        \t  return text()\n          },\n      peg$c19 = /^[0-9]/,\n      peg$c20 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c21 = peg$anyExpectation(),\n      peg$c22 = /^[a-z]/,\n      peg$c23 = peg$classExpectation([[\"a\", \"z\"]], false, false),\n      peg$c24 = /^[@]/,\n      peg$c25 = peg$classExpectation([\"@\"], false, false),\n      peg$c26 = /^[.]/,\n      peg$c27 = peg$classExpectation([\".\"], false, false),\n      peg$c28 = \"http://\",\n      peg$c29 = peg$literalExpectation(\"http://\", false),\n      peg$c30 = \"https://\",\n      peg$c31 = peg$literalExpectation(\"https://\", false),\n      peg$c32 = /^[a-z0-9]/,\n      peg$c33 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"]], false, false),\n      peg$c34 = /^[\\/]/,\n      peg$c35 = peg$classExpectation([\"/\"], false, false),\n      peg$c36 = function() {\n          return text()\n        },\n      peg$c37 = /^[([{\"'`\\u2018]/,\n      peg$c38 = peg$classExpectation([\"(\", \"[\", \"{\", \"\\\"\", \"'\", \"`\", \"\\u2018\"], false, false),\n      peg$c39 = /^[)\\]}\"'`\\u2019]/,\n      peg$c40 = peg$classExpectation([\")\", \"]\", \"}\", \"\\\"\", \"'\", \"`\", \"\\u2019\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parses() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parseSentences();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseWhitespace();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 === peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parseQuotedSentences();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseWhitespace();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parseSentences();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseWhitespace();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parseQuotedSentences();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseWhitespace();\n            if (s4 !== peg$FAILED) {\n              s3 = [s3, s4];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c0(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseSentences() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parseSentence();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseWhitespace();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parseSentence();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseWhitespace();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseQuotedSentences() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseOpenSymbol();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseSentence();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseWhitespace();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseSentence();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseWhitespace();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseCloseSymbol();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseSentence() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseTokenSeq();\n    if (s2 === peg$FAILED) {\n      s2 = peg$parseQuotedTokenSeq();\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseTokenSeq();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseQuotedTokenSeq();\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEndOfSentence();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c3(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseTokenSeq() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parseToken();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseWhitespace();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parseToken();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseWhitespace();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c4(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseQuotedTokenSeq() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseOpenSymbol();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseToken();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseWhitespace();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseToken();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseWhitespace();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseEndOfSentence();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseCloseSymbol();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c5(s1, s2, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEndOfSentence() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c6.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c7); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (peg$c6.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c7); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c8();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseWhitespace() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c9.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (peg$c9.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c8();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseToken() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseURI();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseEmail();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseNumber();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseAbbreviation();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseWord();\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c11(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseAbbreviation() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c12.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c13); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c12.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c13); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c14(s1);\n      if (s2) {\n        s2 = void 0;\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseWord() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c16.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c17); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c16.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c17); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c18();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseNumber() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c19.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c20); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c19.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c20); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        if (peg$c19.test(input.charAt(peg$currPos))) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c20); }\n        }\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            if (peg$c19.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c20); }\n            }\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseCloseSymbol();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEmail() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c22.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c23); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c22.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c24.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c25); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        if (peg$c22.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            if (peg$c22.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c23); }\n            }\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          if (peg$c26.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c27); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c22.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c23); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c22.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c23); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c8();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseURI() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7) === peg$c28) {\n      s1 = peg$c28;\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c29); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 8) === peg$c30) {\n        s1 = peg$c30;\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c31); }\n      }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c32.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c33); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c32.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c33); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (peg$c26.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c27); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = [];\n          if (peg$c32.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c33); }\n          }\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              if (peg$c32.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c33); }\n              }\n            }\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            if (peg$c26.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c27); }\n            }\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c32.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c33); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c32.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = [];\n              if (peg$c32.test(input.charAt(peg$currPos))) {\n                s9 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c33); }\n              }\n              if (s9 !== peg$FAILED) {\n                while (s9 !== peg$FAILED) {\n                  s8.push(s9);\n                  if (peg$c32.test(input.charAt(peg$currPos))) {\n                    s9 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                  }\n                }\n              } else {\n                s8 = peg$FAILED;\n              }\n              if (s8 !== peg$FAILED) {\n                if (peg$c34.test(input.charAt(peg$currPos))) {\n                  s9 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c35); }\n                }\n                if (s9 !== peg$FAILED) {\n                  s8 = [s8, s9];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = [];\n                if (peg$c32.test(input.charAt(peg$currPos))) {\n                  s9 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                }\n                if (s9 !== peg$FAILED) {\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    if (peg$c32.test(input.charAt(peg$currPos))) {\n                      s9 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                    }\n                  }\n                } else {\n                  s8 = peg$FAILED;\n                }\n                if (s8 !== peg$FAILED) {\n                  if (peg$c34.test(input.charAt(peg$currPos))) {\n                    s9 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c35); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s8 = [s8, s9];\n                    s7 = s8;\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c36();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOpenSymbol() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (peg$c37.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c38); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c8();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseCloseSymbol() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (peg$c39.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c40); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c8();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n\n  \tconst knownAbbreviations = require(\"../util/abbreviations_en\").knownAbbreviations\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}