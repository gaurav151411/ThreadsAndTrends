{"ast":null,"code":"/*\nGISScaler class that finds parameters of features\nCopyright (C) 2017 Hugo W.L. ter Doest\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict';\n\nconst Feature = require('./Feature');\nconst Distribution = require('./Distribution');\n\n// classes is an array of classes\n// features is an array of feature functions\nfunction GISScaler(featureSet, sample) {\n  this.featureSet = featureSet;\n  this.sample = sample;\n}\n\n// Returns true if a correction feature is necessary\nGISScaler.prototype.calculateMaxSumOfFeatures = function () {\n  const that = this;\n  this.C = 0;\n  this.featureSums = {};\n  const listOfSumValues = [];\n\n  // Since feature functions are derived from the sample\n  // we can use the sample to calculate the max sum\n  // We look at each sample element only once\n  this.sample.elements.forEach(function (x) {\n    if (!that.featureSums[x.toString()]) {\n      let sum = 0;\n      that.featureSet.getFeatures().forEach(function (f) {\n        sum += f.apply(x);\n      });\n      if (sum > that.C) {\n        that.C = sum;\n      }\n      that.featureSums[x.toString()] = sum;\n      listOfSumValues.push(sum);\n    }\n  });\n  // console.log(\"GISScaler:calculateMaxSumOfFeatures:maxSum is \" + this.C);\n\n  // Check if a correction feature is necessary\n  listOfSumValues.sort(function (a, b) {\n    return a - b;\n  });\n  return listOfSumValues[0] !== listOfSumValues[listOfSumValues.length - 1];\n};\nGISScaler.prototype.addCorrectionFeature = function () {\n  if (this.calculateMaxSumOfFeatures()) {\n    // console.log(\"GISScaler:addCorrectionFeature:C is \" + this.C);\n    const that = this;\n    function f(x) {\n      if (that.featureSums[x.toString()] !== undefined) {\n        return that.C - that.featureSums[x.toString()];\n      }\n      return 0;\n    }\n    const correctionFeature = new Feature(f, 'Correction feature', []);\n    // console.log(\"GISScaler:addCorrectionFeature:correctionFeature \" + JSON.stringify(correctionFeature));\n    this.featureSet.addFeature(correctionFeature);\n  } else {\n    // console.log(\"Correction feature not needed\");\n  }\n};\n\n// This is the Generalised Iterative Scaling algorithm\n// It ends if the improvement in likelihood of the distribution does not\n// improve more than minImprovement or if the maximum number of iterations is\n// reached.\nGISScaler.prototype.run = function (maxIterations, minImprovement) {\n  this.iteration = 0;\n  this.improvement = 0;\n  this.addCorrectionFeature();\n  // Build up the distribution p\n  const alpha = new Array(this.featureSet.size());\n  for (let i = 0; i < alpha.length; i++) {\n    alpha[i] = 1;\n  }\n  const p = new Distribution(alpha, this.featureSet, this.sample);\n  // console.log(\"Distribution created\");\n  p.prepare();\n  // console.log(\"Distribution prepared\");\n  let KLDistance = p.KullbackLieblerDistance();\n  const newAlpha = new Array(this.featureSet.size());\n  let observedExpectation = 0;\n  let expectationApprox = 0;\n  do {\n    // console.log(\"Iteration \" + this.iteration + \" - Log likelihood of sample: \" + likelihood + \" - Entropy: \" + p.entropy());\n    for (let i = 0; i < this.featureSet.size(); i++) {\n      observedExpectation = this.featureSet.getFeatures()[i].observedExpectation(this.sample);\n      expectationApprox = this.featureSet.getFeatures()[i].expectationApprox(p, this.sample);\n      // console.log(\"Iteration \" + this.iteration + \" - Feature \" + i);\n      newAlpha[i] = p.alpha[i] * Math.pow(observedExpectation / expectationApprox, 1 / this.C);\n\n      // console.log(\"GISScaler.run: old alpha[\" + i + \"]: \" + p.alpha[i]);\n      // console.log(\"GISScaler.run: new alpha[\" + i + \"]: \" + newAlpha[i]);\n    }\n\n    // Make the newly calculated parameters current parameters\n    newAlpha.forEach(function (newAlphaj, j) {\n      p.alpha[j] = newAlphaj;\n    });\n    // Recalculate a priori and a posteriori probabilities\n    p.prepare();\n    this.iteration++;\n    const newKLDistance = p.KullbackLieblerDistance();\n    this.improvement = KLDistance - newKLDistance;\n    // console.log(\"Iteration \" + this.iteration + \" - Old likelihood: \" + likelihood + \" - New likelihood: \" + newLikelihood);\n    // console.log(\"Iteration \" + this.iteration + \" - Old KL: \" + KLDistance + \" - New KL: \" + newKLDistance);\n\n    KLDistance = newKLDistance;\n  } while (this.iteration < maxIterations && this.improvement > minImprovement);\n  // } while (iteration < maxIterations);\n  /*\n  var that = this;\n  this.featureSet.getFeatures().forEach(function(f, j) {\n    console.log(\"Observed expectation of feature \" + j + \": \" + f.observedExpectation(that.sample) +\n      \" - Expection of feature according to p: \" + f.expectationApprox(p, that.sample));\n  });\n  */\n\n  return p;\n};\nmodule.exports = GISScaler;","map":{"version":3,"names":["Feature","require","Distribution","GISScaler","featureSet","sample","prototype","calculateMaxSumOfFeatures","that","C","featureSums","listOfSumValues","elements","forEach","x","toString","sum","getFeatures","f","apply","push","sort","a","b","length","addCorrectionFeature","undefined","correctionFeature","addFeature","run","maxIterations","minImprovement","iteration","improvement","alpha","Array","size","i","p","prepare","KLDistance","KullbackLieblerDistance","newAlpha","observedExpectation","expectationApprox","Math","pow","newAlphaj","j","newKLDistance","module","exports"],"sources":["/Users/gauravsain/Desktop/PEPCODING/DEV/React/threadsandtrends/node_modules/natural/lib/natural/classifiers/maxent/GISScaler.js"],"sourcesContent":["/*\nGISScaler class that finds parameters of features\nCopyright (C) 2017 Hugo W.L. ter Doest\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\nconst Feature = require('./Feature')\nconst Distribution = require('./Distribution')\n\n// classes is an array of classes\n// features is an array of feature functions\nfunction GISScaler (featureSet, sample) {\n  this.featureSet = featureSet\n  this.sample = sample\n}\n\n// Returns true if a correction feature is necessary\nGISScaler.prototype.calculateMaxSumOfFeatures = function () {\n  const that = this\n  this.C = 0\n  this.featureSums = {}\n  const listOfSumValues = []\n\n  // Since feature functions are derived from the sample\n  // we can use the sample to calculate the max sum\n  // We look at each sample element only once\n  this.sample.elements.forEach(function (x) {\n    if (!that.featureSums[x.toString()]) {\n      let sum = 0\n      that.featureSet.getFeatures().forEach(function (f) {\n        sum += f.apply(x)\n      })\n      if (sum > that.C) {\n        that.C = sum\n      }\n      that.featureSums[x.toString()] = sum\n      listOfSumValues.push(sum)\n    }\n  })\n  // console.log(\"GISScaler:calculateMaxSumOfFeatures:maxSum is \" + this.C);\n\n  // Check if a correction feature is necessary\n  listOfSumValues.sort(function (a, b) {\n    return a - b\n  })\n  return (listOfSumValues[0] !== listOfSumValues[listOfSumValues.length - 1])\n}\n\nGISScaler.prototype.addCorrectionFeature = function () {\n  if (this.calculateMaxSumOfFeatures()) {\n    // console.log(\"GISScaler:addCorrectionFeature:C is \" + this.C);\n    const that = this\n\n    function f (x) {\n      if (that.featureSums[x.toString()] !== undefined) {\n        return that.C - that.featureSums[x.toString()]\n      }\n      return 0\n    }\n\n    const correctionFeature = new Feature(f, 'Correction feature', [])\n    // console.log(\"GISScaler:addCorrectionFeature:correctionFeature \" + JSON.stringify(correctionFeature));\n    this.featureSet.addFeature(correctionFeature)\n  } else {\n    // console.log(\"Correction feature not needed\");\n  }\n}\n\n// This is the Generalised Iterative Scaling algorithm\n// It ends if the improvement in likelihood of the distribution does not\n// improve more than minImprovement or if the maximum number of iterations is\n// reached.\nGISScaler.prototype.run = function (maxIterations, minImprovement) {\n  this.iteration = 0\n  this.improvement = 0\n\n  this.addCorrectionFeature()\n  // Build up the distribution p\n  const alpha = new Array(this.featureSet.size())\n  for (let i = 0; i < alpha.length; i++) {\n    alpha[i] = 1\n  }\n  const p = new Distribution(alpha, this.featureSet, this.sample)\n  // console.log(\"Distribution created\");\n  p.prepare()\n  // console.log(\"Distribution prepared\");\n  let KLDistance = p.KullbackLieblerDistance()\n\n  const newAlpha = new Array(this.featureSet.size())\n  let observedExpectation = 0\n  let expectationApprox = 0\n  do {\n    // console.log(\"Iteration \" + this.iteration + \" - Log likelihood of sample: \" + likelihood + \" - Entropy: \" + p.entropy());\n    for (let i = 0; i < this.featureSet.size(); i++) {\n      observedExpectation = this.featureSet.getFeatures()[i].observedExpectation(this.sample)\n      expectationApprox = this.featureSet.getFeatures()[i].expectationApprox(p, this.sample)\n      // console.log(\"Iteration \" + this.iteration + \" - Feature \" + i);\n      newAlpha[i] = p.alpha[i] * Math.pow(observedExpectation / expectationApprox, 1 / this.C)\n\n      // console.log(\"GISScaler.run: old alpha[\" + i + \"]: \" + p.alpha[i]);\n      // console.log(\"GISScaler.run: new alpha[\" + i + \"]: \" + newAlpha[i]);\n    }\n\n    // Make the newly calculated parameters current parameters\n    newAlpha.forEach(function (newAlphaj, j) {\n      p.alpha[j] = newAlphaj\n    })\n    // Recalculate a priori and a posteriori probabilities\n    p.prepare()\n\n    this.iteration++\n    const newKLDistance = p.KullbackLieblerDistance()\n    this.improvement = KLDistance - newKLDistance\n    // console.log(\"Iteration \" + this.iteration + \" - Old likelihood: \" + likelihood + \" - New likelihood: \" + newLikelihood);\n    // console.log(\"Iteration \" + this.iteration + \" - Old KL: \" + KLDistance + \" - New KL: \" + newKLDistance);\n\n    KLDistance = newKLDistance\n  } while ((this.iteration < maxIterations) && (this.improvement > minImprovement))\n  // } while (iteration < maxIterations);\n  /*\n  var that = this;\n  this.featureSet.getFeatures().forEach(function(f, j) {\n    console.log(\"Observed expectation of feature \" + j + \": \" + f.observedExpectation(that.sample) +\n      \" - Expection of feature according to p: \" + f.expectationApprox(p, that.sample));\n  });\n  */\n\n  return p\n}\n\nmodule.exports = GISScaler\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}