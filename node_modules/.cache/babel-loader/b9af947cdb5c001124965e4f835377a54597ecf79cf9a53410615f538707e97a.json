{"ast":null,"code":"/*\nCopyright (c) 2011, Rob Ellis, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nconst _ = require('underscore');\nconst Tokenizer = require('../tokenizers/regexp_tokenizer').WordTokenizer;\nlet tokenizer = new Tokenizer();\nlet stopwords = require('../util/stopwords').words;\nconst fs = require('fs');\nfunction buildDocument(text, key) {\n  let stopOut;\n  if (typeof text === 'string') {\n    text = tokenizer.tokenize(text.toLowerCase());\n    stopOut = true;\n  } else if (!_.isArray(text)) {\n    stopOut = false;\n    return text;\n  }\n  return text.reduce(function (document, term) {\n    // next line solves https://github.com/NaturalNode/natural/issues/119\n    if (typeof document[term] === 'function') {\n      document[term] = 0;\n    }\n    if (!stopOut || stopwords.indexOf(term) < 0) {\n      document[term] = document[term] ? document[term] + 1 : 1;\n    }\n    return document;\n  }, {\n    __key: key\n  });\n}\nfunction tf(term, document) {\n  return document[term] ? document[term] : 0;\n}\nfunction documentHasTerm(term, document) {\n  return document[term] && document[term] > 0;\n}\nfunction TfIdf(deserialized) {\n  if (deserialized) {\n    this.documents = deserialized.documents;\n  } else {\n    this.documents = [];\n  }\n  this._idfCache = {};\n}\n\n// backwards compatibility for < node 0.10\nfunction isEncoding(encoding) {\n  if (typeof Buffer.isEncoding !== 'undefined') {\n    return Buffer.isEncoding(encoding);\n  }\n  switch ((encoding + '').toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n    case 'raw':\n      return true;\n  }\n  return false;\n}\nmodule.exports = TfIdf;\nTfIdf.tf = tf;\nTfIdf.prototype.idf = function (term, force) {\n  // Lookup the term in the New term-IDF caching,\n  // this will cut search times down exponentially on large document sets.\n  // if (this._idfCache[term] && this._idfCache.hasOwnProperty(term) && force !== true) { return this._idfCache[term] }\n  if (this._idfCache[term] && force !== true) {\n    return this._idfCache[term];\n  }\n  const docsWithTerm = this.documents.reduce(function (count, document) {\n    return count + (documentHasTerm(term, document) ? 1 : 0);\n  }, 0);\n  const idf = 1 + Math.log(this.documents.length / (1 + docsWithTerm));\n\n  // Add the idf to the term cache and return it\n  this._idfCache[term] = idf;\n  return idf;\n};\n\n// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.\n// Otherwise, the cache will just be wiped clean\nTfIdf.prototype.addDocument = function (document, key, restoreCache) {\n  this.documents.push(buildDocument(document, key));\n\n  // make sure the cache is invalidated when new documents arrive\n  if (restoreCache === true) {\n    for (const term in this._idfCache) {\n      // invoking idf with the force option set will\n      // force a recomputation of the idf, and it will\n      // automatically refresh the cache value.\n      this.idf(term, true);\n    }\n  } else {\n    // this._idfCache = {}\n    // so that we do not have trouble with terms that match property names\n    this._idfCache = Object.create(null);\n  }\n};\n\n// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.\n// Otherwise, the cache will just be wiped clean\nTfIdf.prototype.addFileSync = function (path, encoding, key, restoreCache) {\n  if (!encoding) {\n    encoding = 'utf8';\n  }\n  if (!isEncoding(encoding)) {\n    throw new Error('Invalid encoding: ' + encoding);\n  }\n  const document = fs.readFileSync(path, encoding);\n  this.documents.push(buildDocument(document, key));\n\n  // make sure the cache is invalidated when new documents arrive\n  if (restoreCache === true) {\n    for (const term in this._idfCache) {\n      // invoking idf with the force option set will\n      // force a recomputation of the idf, and it will\n      // automatically refresh the cache value.\n      this.idf(term, true);\n    }\n  } else {\n    this._idfCache = {};\n  }\n};\nTfIdf.prototype.tfidf = function (terms, d) {\n  const _this = this;\n  if (!_.isArray(terms)) {\n    terms = tokenizer.tokenize(terms.toString().toLowerCase());\n  }\n  return terms.reduce(function (value, term) {\n    let idf = _this.idf(term);\n    idf = idf === Infinity ? 0 : idf;\n    return value + tf(term, _this.documents[d]) * idf;\n  }, 0.0);\n};\nTfIdf.prototype.listTerms = function (d) {\n  const terms = [];\n  const _this = this;\n  for (const term in this.documents[d]) {\n    if (this.documents[d]) {\n      if (term !== '__key') {\n        terms.push({\n          term: term,\n          tf: tf(term, _this.documents[d]),\n          idf: _this.idf(term),\n          tfidf: _this.tfidf(term, d)\n        });\n      }\n    }\n  }\n  return terms.sort(function (x, y) {\n    return y.tfidf - x.tfidf;\n  });\n};\nTfIdf.prototype.tfidfs = function (terms, callback) {\n  const tfidfs = new Array(this.documents.length);\n  for (let i = 0; i < this.documents.length; i++) {\n    tfidfs[i] = this.tfidf(terms, i);\n    if (callback) {\n      callback(i, tfidfs[i], this.documents[i].__key);\n    }\n  }\n  return tfidfs;\n};\n\n// Define a tokenizer other than the default \"WordTokenizer\"\nTfIdf.prototype.setTokenizer = function (t) {\n  if (!_.isFunction(t.tokenize)) {\n    throw new Error('Expected a valid Tokenizer');\n  }\n  tokenizer = t;\n};\n\n// Define a stopwords other than the default\nTfIdf.prototype.setStopwords = function (customStopwords) {\n  if (!Array.isArray(customStopwords)) {\n    return false;\n  }\n  let wrongElement = false;\n  customStopwords.forEach(stopword => {\n    if (typeof stopword !== 'string') {\n      wrongElement = true;\n    }\n  });\n  if (wrongElement) {\n    return false;\n  }\n  stopwords = customStopwords;\n  return true;\n};","map":{"version":3,"names":["_","require","Tokenizer","WordTokenizer","tokenizer","stopwords","words","fs","buildDocument","text","key","stopOut","tokenize","toLowerCase","isArray","reduce","document","term","indexOf","__key","tf","documentHasTerm","TfIdf","deserialized","documents","_idfCache","isEncoding","encoding","Buffer","module","exports","prototype","idf","force","docsWithTerm","count","Math","log","length","addDocument","restoreCache","push","Object","create","addFileSync","path","Error","readFileSync","tfidf","terms","d","_this","toString","value","Infinity","listTerms","sort","x","y","tfidfs","callback","Array","i","setTokenizer","t","isFunction","setStopwords","customStopwords","wrongElement","forEach","stopword"],"sources":["/Users/gauravsain/Desktop/PEPCODING/DEV/React/threadsandtrends/node_modules/natural/lib/natural/tfidf/tfidf.js"],"sourcesContent":["/*\nCopyright (c) 2011, Rob Ellis, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nconst _ = require('underscore')\nconst Tokenizer = require('../tokenizers/regexp_tokenizer').WordTokenizer\nlet tokenizer = new Tokenizer()\nlet stopwords = require('../util/stopwords').words\nconst fs = require('fs')\n\nfunction buildDocument (text, key) {\n  let stopOut\n\n  if (typeof text === 'string') {\n    text = tokenizer.tokenize(text.toLowerCase())\n    stopOut = true\n  } else if (!_.isArray(text)) {\n    stopOut = false\n    return text\n  }\n\n  return text.reduce(function (document, term) {\n    // next line solves https://github.com/NaturalNode/natural/issues/119\n    if (typeof document[term] === 'function') {\n      document[term] = 0\n    }\n    if (!stopOut || stopwords.indexOf(term) < 0) {\n      document[term] = (document[term] ? document[term] + 1 : 1)\n    }\n    return document\n  }, { __key: key })\n}\n\nfunction tf (term, document) {\n  return document[term] ? document[term] : 0\n}\n\nfunction documentHasTerm (term, document) {\n  return document[term] && document[term] > 0\n}\n\nfunction TfIdf (deserialized) {\n  if (deserialized) { this.documents = deserialized.documents } else { this.documents = [] }\n\n  this._idfCache = {}\n}\n\n// backwards compatibility for < node 0.10\nfunction isEncoding (encoding) {\n  if (typeof Buffer.isEncoding !== 'undefined') { return Buffer.isEncoding(encoding) }\n  switch ((encoding + '').toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n    case 'raw':\n      return true\n  }\n  return false\n}\n\nmodule.exports = TfIdf\nTfIdf.tf = tf\n\nTfIdf.prototype.idf = function (term, force) {\n  // Lookup the term in the New term-IDF caching,\n  // this will cut search times down exponentially on large document sets.\n  // if (this._idfCache[term] && this._idfCache.hasOwnProperty(term) && force !== true) { return this._idfCache[term] }\n  if (this._idfCache[term] && force !== true) {\n    return this._idfCache[term]\n  }\n\n  const docsWithTerm = this.documents.reduce(function (count, document) {\n    return count + (documentHasTerm(term, document) ? 1 : 0)\n  }, 0)\n\n  const idf = 1 + Math.log((this.documents.length) / (1 + docsWithTerm))\n\n  // Add the idf to the term cache and return it\n  this._idfCache[term] = idf\n  return idf\n}\n\n// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.\n// Otherwise, the cache will just be wiped clean\nTfIdf.prototype.addDocument = function (document, key, restoreCache) {\n  this.documents.push(buildDocument(document, key))\n\n  // make sure the cache is invalidated when new documents arrive\n  if (restoreCache === true) {\n    for (const term in this._idfCache) {\n      // invoking idf with the force option set will\n      // force a recomputation of the idf, and it will\n      // automatically refresh the cache value.\n      this.idf(term, true)\n    }\n  } else {\n    // this._idfCache = {}\n    // so that we do not have trouble with terms that match property names\n    this._idfCache = Object.create(null)\n  }\n}\n\n// If restoreCache is set to true, all terms idf scores currently cached will be recomputed.\n// Otherwise, the cache will just be wiped clean\nTfIdf.prototype.addFileSync = function (path, encoding, key, restoreCache) {\n  if (!encoding) { encoding = 'utf8' }\n  if (!isEncoding(encoding)) { throw new Error('Invalid encoding: ' + encoding) }\n\n  const document = fs.readFileSync(path, encoding)\n  this.documents.push(buildDocument(document, key))\n\n  // make sure the cache is invalidated when new documents arrive\n  if (restoreCache === true) {\n    for (const term in this._idfCache) {\n      // invoking idf with the force option set will\n      // force a recomputation of the idf, and it will\n      // automatically refresh the cache value.\n      this.idf(term, true)\n    }\n  } else {\n    this._idfCache = {}\n  }\n}\n\nTfIdf.prototype.tfidf = function (terms, d) {\n  const _this = this\n\n  if (!_.isArray(terms)) {\n    terms = tokenizer.tokenize(terms.toString().toLowerCase())\n  }\n\n  return terms.reduce(function (value, term) {\n    let idf = _this.idf(term)\n    idf = idf === Infinity ? 0 : idf\n    return value + (tf(term, _this.documents[d]) * idf)\n  }, 0.0)\n}\n\nTfIdf.prototype.listTerms = function (d) {\n  const terms = []\n  const _this = this\n  for (const term in this.documents[d]) {\n    if (this.documents[d]) {\n      if (term !== '__key') {\n        terms.push({\n          term: term,\n          tf: tf(term, _this.documents[d]),\n          idf: _this.idf(term),\n          tfidf: _this.tfidf(term, d)\n        })\n      }\n    }\n  }\n\n  return terms.sort(function (x, y) { return y.tfidf - x.tfidf })\n}\n\nTfIdf.prototype.tfidfs = function (terms, callback) {\n  const tfidfs = new Array(this.documents.length)\n\n  for (let i = 0; i < this.documents.length; i++) {\n    tfidfs[i] = this.tfidf(terms, i)\n\n    if (callback) { callback(i, tfidfs[i], this.documents[i].__key) }\n  }\n\n  return tfidfs\n}\n\n// Define a tokenizer other than the default \"WordTokenizer\"\nTfIdf.prototype.setTokenizer = function (t) {\n  if (!_.isFunction(t.tokenize)) { throw new Error('Expected a valid Tokenizer') }\n  tokenizer = t\n}\n\n// Define a stopwords other than the default\nTfIdf.prototype.setStopwords = function (customStopwords) {\n  if (!Array.isArray(customStopwords)) { return false }\n\n  let wrongElement = false\n  customStopwords.forEach(stopword => {\n    if ((typeof stopword) !== 'string') {\n      wrongElement = true\n    }\n  })\n  if (wrongElement) {\n    return false\n  }\n\n  stopwords = customStopwords\n  return true\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}